chunks:

-
    title: "Python Hello World"
    id: welcome
    rules:
    -   if_before: end_week 3
        weight: 100

    -   weight: 0

    content: |

            # Welcome to the course!

            Please take our introductory [quiz](flow:quiz-test).
            Or via here <a href="flow:quiz-test" role="button" class="btn btn-primary">Bootstrap button</a>.
            # Hi there!
            0x0C. Python - Almost a circle
            ==============================

            -   By Guillaume
            -   Weight: 1
            -   Ongoing project - started 12-23-2021, must end by 01-04-2022 (in 11 days) - you're done with 0% of tasks.
            -   Checker will be released at 01-03-2022 01:12 AM
            -   **Manual QA review must be done** (request it when you are done with the project)
            -   QA review fully automated.

            Background Context
            ------------------

            The AirBnB project is a big part of the Higher level curriculum. This project will help you be ready for it.

            In this project, you will review everything about Python:

            -   Import
            -   Exceptions
            -   Class
            -   Private attribute
            -   Getter/Setter
            -   Class method
            -   Static method
            -   Inheritance
            -   Unittest
            -   Read/Write file

            You will also learn about:

            -   `args` and `kwargs`
            -   Serialization/Deserialization
            -   JSON

            Resources
            ---------

            **Read or watch**:

            -   [args/kwargs](https://alx-intranet.hbtn.io/rltoken/7gc6UzxSL81HcuAwklUbuQ "args/kwargs")
            -   [JSON encoder and decoder](https://alx-intranet.hbtn.io/rltoken/rGVU9mt57rVURGnjK6n4_Q "JSON encoder and decoder")
            -   [unittest module](https://alx-intranet.hbtn.io/rltoken/soictNXCPE18ASL3INoeew "unittest module")
            -   [Python test cheatsheet](https://alx-intranet.hbtn.io/rltoken/uI9iskBCcNo5pc7j9Vy86A "Python test cheatsheet")

            Learning Objectives
            -------------------

            At the end of this project, you are expected to be able to [explain to anyone](https://alx-intranet.hbtn.io/rltoken/SBdRhGGBuqzWcwcuKyapSQ "explain to anyone"), **without the help of Google**:

            ### General

            -   What is Unit testing and how to implement it in a large project
            -   How to serialize and deserialize a Class
            -   How to write and read a JSON file
            -   What is `*args` and how to use it
            -   What is `**kwargs` and how to use it
            -   How to handle named arguments in a function

            Requirements
            ------------

            ### Python Scripts

            -   Allowed editors: `vi`, `vim`, `emacs`
            -   All your files will be interpreted/compiled on Ubuntu 20.04 LTS using python3 (version 3.8.5)
            -   All your files should end with a new line
            -   The first line of all your files should be exactly `#!/usr/bin/python3`
            -   A `README.md` file, at the root of the folder of the project, is mandatory
            -   Your code should use the pycodestyle (version 2.7.*)
            -   All your files must be executable
            -   The length of your files will be tested using `wc`
            -   All your modules should be documented: `python3 -c 'print(__import__("my_module").__doc__)'`
            -   All your classes should be documented: `python3 -c 'print(__import__("my_module").MyClass.__doc__)'`
            -   All your functions (inside and outside a class) should be documented: `python3 -c 'print(__import__("my_module").my_function.__doc__)'` and `python3 -c 'print(__import__("my_module").MyClass.my_function.__doc__)'`
            -   A documentation is not a simple word, it's a real sentence explaining what's the purpose of the module, class or method (the length of it will be verified)

            ### Python Unit Tests

            -   Allowed editors: `vi`, `vim`, `emacs`
            -   All your files should end with a new line
            -   All your test files should be inside a folder `tests`
            -   You have to use the [unittest module](https://alx-intranet.hbtn.io/rltoken/soictNXCPE18ASL3INoeew "unittest module")
            -   All your test files should be python files (extension: `.py`)
            -   All your test files and folders should start with `test_`
            -   Your file organization in the tests folder should be the same as your project: ex: for `models/base.py`, unit tests must be in: `tests/test_models/test_base.py`
            -   All your tests should be executed by using this command: `python3 -m unittest discover tests`
            -   You can also test file by file by using this command: `python3 -m unittest tests/test_models/test_base.py`
            -   We strongly encourage you to work together on test cases so that you don't miss any edge case

-
    title: "Python hello tas pointer"

    id: tas pointer
    rules:
    -
        if_after: 2022-06-01
        weight: 200

    -
        shown: True
        weight: 0

    content: |

        # Welcome to the computer-based testing facility!

        <a href="flow:python_hello_world_task" class="btn btn-secondary">Start tas &raquo;</a>