title: "RELATE Test Quiz"
description: |

    # RELATE Test Quiz

rules:
    # (Things behind '#' hash marks are comments.)
    # Allow students to start two attempts at the quiz before the deadline.
    # After that, only allow access to previously started quizzes.

    start:
    -
        if_after: 2015-03-06 23:59:00
        if_has_role: [student, ta, instructor]
        if_has_fewer_sessions_than: 2
        may_start_new_session: True
        may_list_existing_sessions: True

    -
        may_start_new_session: False
        may_list_existing_sessions: True

    # Allow students to submit quiz answers before the deadline.
    # After the deadline, the quiz becomes read-only. (The 'modify'
    # permission goes away.)

    access:
    -
        if_after: 2015-03-06 23:59:02
        permissions: [view, submit_answer, end_session, see_correctness]

    -
        permissions: [view, see_correctness, see_answer_after_submission]

    # Record grades under the machine-readable name 'test_quiz'.
    # If there is more than one grade, use the maximum.

    grade_identifier: attack_is_the_best_defense_task
    grade_aggregation_strategy: max_grade

    grading:
    -   
        if_completed_before: end_week 1
        credit_percent: 100

    -
        if_completed_before: end_week 2
        credit_percent: 65

    -
        credit_percent: 50

pages:

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

        Tasks
        -----

        ### 0\. ARP spoofing and sniffing unencrypted traffic

        #advanced

        ![](https://s3.amazonaws.com/alx-intranet.hbtn.io/uploads/medias/2020/9/01c5a1e3f29d290b188d34be5cf534d3255058a7.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIARDDGGGOUSBVO6H7D%2F20220307%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220307T142534Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=bf9af664503b8ca4a4f4b4332b6c5e93f5f31a7c8a5844166833b3389655f33f)

        Security is a vast topic, and network security is an important part of it. A lot of very sensitive information goes over networks that are used by many people, and some people might have bad intentions. Traffic going through a network can be intercepted by a malicious machine pretending to be another network device. Once the traffic is redirected to the malicious machine, the hacker can keep a copy of it and analyze it for potential interesting information. It is important to note that the traffic must then be forwarded to the actual device it was supposed to go (so that users and the system keep going as if nothing happened).

        Any information that is not encrypted and sniffed by an attacker can be seen by the attacker - that could be your email password or credit card information. While today's network security is much stronger than it used to be, there are still some legacy systems that are using unencrypted communication means. A popular one is `telnet`.

        In this project, we will not go over ARP spoofing, but we'll start by sniffing unencrypted traffic and getting information out of it.

        [Sendgrid offers](https://alx-intranet.hbtn.io/rltoken/u5jqdTiofjsRJQOgc32XKA "Sendgrid offers") is an emailing service that provides state of the art secure system to send emails, but also supports a legacy unsecured way: `telnet`. You can create an account for free, which is what I did, and send an email using `telnet`:

        ```
        sylvain@ubuntu$ telnet smtp.sendgrid.net 587
        Trying 167.89.121.145...
        Connected to smtp.sendgrid.net.
        Escape character is '^]'.
        220 SG ESMTP service ready at ismtpd0013p1las1.sendgrid.net
        EHLO ismtpd0013p1las1.sendgrid.net
        250-smtp.sendgrid.net
        250-8BITMIME
        250-PIPELINING
        250-SIZE 31457280
        250-STARTTLS
        250-AUTH PLAIN LOGIN
        250 AUTH=PLAIN LOGIN
        auth login
        334 VXNlcm5hbWU6
        VGhpcyBpcyBteSBsb2dpbg==
        334 UGFzc3dvcmQ6
        WW91IHJlYWxseSB0aG91Z2h0IEkgd291bGQgbGV0IG15IHBhc3N3b3JkIGhlcmU/ISA6RA==
        235 Authentication successful
        mail from: sylvain@kalache.fr
        250 Sender address accepted
        rcpt to: julien@google.com
        250 Recipient address accepted
        data
        354 Continue
        To: Julien
        From: Sylvain
        Subject: Hello from the insecure world

        I am sending you this email from a Terminal.
        .
        250 Ok: queued as Aq1zhMM3QYeEprixUiFYNg
        quit
        221 See you later
        Connection closed by foreign host.
        sylvain@ubuntu$

        ```

        I wrote the script `user_authenticating_into_server` that performs the authentication steps that I just showed above. Your mission is to execute `user_authenticating_into_server` locally on your machine and, using `tcpdump`, sniff the network to find my password. Once you find it, paste the password in your answer file. **This script will not work on a Docker container or Mac OS, use your Ubuntu vagrant machine or any other Linux machine.**

        You can download the script `user_authenticating_into_server` [here](https://alx-intranet.hbtn.io/rltoken/GE_FoAUArlVccQlt7CuBGA "here")

        **DISCLAIMER**: you will probably see `Authentication failed: Bad username / password` in the `tcpdump` trace. It's normal, we deleted the user to our Sendgrid account. You can't verify the password found via Sendgrid, only the correction system can!

        **Repo:**

        -   GitHub repository: `alx-system_engineering-devops`
        -   Directory: `attack_is_the_best_defense`
        -   File: `0-sniffing`

         Done? Help
            
    rubric: |

            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext1
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |
            
            Tasks
            -----
            
            ### 1\. Dictionary attack

            #advanced

            Password-based authentication systems can be easily broken by using a dictionary attack (you'll have to find your own password dictionary). Let's try it on an SSH account.

            -   Install Docker on your machine Ubuntu
            -   Pull and run the Docker image `sylvainkalache/264-1` with the command `docker run -p 2222:22 -d -ti sylvainkalache/264-1`
            -   Find a password dictionary (you might need multiple of them)
            -   Install and use `hydra` to try to brute force the account `sylvain` via SSH on the Docker container
            -   Because the Docker container is running locally, `hydra` should access the SSH account via IP `127.0.0.1` and port `2222`
            -   Hint: the password is 11 characters long

            Once you found the password, share it in your answer file.

            **Repo:**

            -   GitHub repository: `alx-system_engineering-devops`
            -   Directory: `attack_is_the_best_defense`
            -   File: `1-dictionary_attack`

    rubric: |
            
            Has something interesting to say.



completion_text: |

        You have successfully completed the test exam!
