title: "RELATE Test Quiz"
description: |

    # RELATE Test Quiz

rules:
    # (Things behind '#' hash marks are comments.)
    # Allow students to start two attempts at the quiz before the deadline.
    # After that, only allow access to previously started quizzes.

    start:
    -
        if_after: 2015-03-06 23:59:00
        if_has_role: [student, ta, instructor]
        if_has_fewer_sessions_than: 2
        may_start_new_session: True
        may_list_existing_sessions: True

    -
        may_start_new_session: False
        may_list_existing_sessions: True

    # Allow students to submit quiz answers before the deadline.
    # After the deadline, the quiz becomes read-only. (The 'modify'
    # permission goes away.)

    access:
    -
        if_after: 2015-03-06 23:59:02
        permissions: [view, submit_answer, end_session, see_correctness]

    -
        permissions: [view, see_correctness, see_answer_after_submission]

    # Record grades under the machine-readable name 'test_quiz'.
    # If there is more than one grade, use the maximum.

    grade_identifier: web_infrastructure_design_task
    grade_aggregation_strategy: max_grade

    grading:
    -   
        if_completed_before: end_week 1
        credit_percent: 100

    -
        if_completed_before: end_week 2
        credit_percent: 65

    -
        credit_percent: 50

pages:

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

        Tasks
        -----

        ### 0\. Simple web stack

        mandatory

        A lot of websites are powered by simple web infrastructure, a lot of time it is composed of a single server with a [LAMP stack](https://alx-intranet.hbtn.io/rltoken/YVDX0XsC6XHp0nmezvT9vQ "LAMP stack").

        On a whiteboard, design a one server web infrastructure that hosts the website that is reachable via `www.foobar.com`. Start your explanation by having a user wanting to access your website.

        Requirements:

        -   You must use:
            -   1 server
            -   1 web server (Nginx)
            -   1 application server
            -   1 application files (your code base)
            -   1 database (MySQL)
            -   1 domain name `foobar.com` configured with a `www` record that points to your server IP `8.8.8.8`
        -   You must be able to explain some specifics about this infrastructure:
            -   What is a server
            -   What is the role of the domain name
            -   What type of DNS record `www` is in `www.foobar.com`
            -   What is the role of the web server
            -   What is the role of the application server
            -   What is the role of the database
            -   What is the server using to communicate with the computer of the user requesting the website
        -   You must be able to explain what the issues are with this infrastructure:
            -   SPOF
            -   Downtime when maintenance needed (like deploying new code web server needs to be restarted)
            -   Cannot scale if too much incoming traffic

        Please, remember that everything must be written in English to further your technical ability in a variety of settings.

        #### Add URLs here:

        **Repo:**

        -   GitHub repository: `alx-system_engineering-devops`
        -   Directory: `0x09-web_infrastructure_design`
        -   File: `0-simple_web_stack`

         Done? Help
            
    rubric: |

            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext1
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |
            
            Tasks
            -----
            
            ### 1\. Distributed web infrastructure

            mandatory

            On a whiteboard, design a three server web infrastructure that hosts the website `www.foobar.com`.

            Requirements:

            -   You must add:
                -   2 servers
                -   1 web server (Nginx)
                -   1 application server
                -   1 load-balancer (HAproxy)
                -   1 set of application files (your code base)
                -   1 database (MySQL)
            -   You must be able to explain some specifics about this infrastructure:
                -   For every additional element, why you are adding it
                -   What distribution algorithm your load balancer is configured with and how it works
                -   Is your load-balancer enabling an Active-Active or Active-Passive setup, explain the difference between both
                -   How a database Primary-Replica (Master-Slave) cluster works
                -   What is the difference between the Primary node and the Replica node in regard to the application
            -   You must be able to explain what the issues are with this infrastructure:
                -   Where are SPOF
                -   Security issues (no firewall, no HTTPS)
                -   No monitoring

            Please, remember that everything must be written in English to further your technical ability in a variety of settings.

            #### Add URLs here:

            **Repo:**

            -   GitHub repository: `alx-system_engineering-devops`
            -   Directory: `0x09-web_infrastructure_design`
            -   File: `1-distributed_web_infrastructure`

             Done? Help

    rubric: |
            
            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext2
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

            Tasks
            -----
            
            ### 2\. Secured and monitored web infrastructure

            mandatory

            On a whiteboard, design a three server web infrastructure that hosts the website `www.foobar.com`, it must be secured, serve encrypted traffic, and be monitored.

            Requirements:

            -   You must add:
                -   3 firewalls
                -   1 SSL certificate to serve `www.foobar.com` over HTTPS
                -   3 monitoring clients (data collector for Sumologic or other monitoring services)
            -   You must be able to explain some specifics about this infrastructure:
                -   For every additional element, why you are adding it
                -   What are firewalls for
                -   Why is the traffic served over HTTPS
                -   What monitoring is used for
                -   How the monitoring tool is collecting data
                -   Explain what to do if you want to monitor your web server QPS
            -   You must be able to explain what the issues are with this infrastructure:
                -   Why terminating SSL at the load balancer level is an issue
                -   Why having only one MySQL server capable of accepting writes is an issue
                -   Why having servers with all the same components (database, web server and application server) might be a problem

            Please, remember that everything must be written in English to further your technical ability in a variety of settings.

            #### Add URLs here:

            **Repo:**

            -   GitHub repository: `alx-system_engineering-devops`
            -   Directory: `0x09-web_infrastructure_design`
            -   File: `2-secured_and_monitored_web_infrastructure`

             Done? Help

    rubric: |

            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext3
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

            Tasks
            -----

            ### 3\. Scale up

            #advanced

            Readme

            -   [Application server vs web server](https://alx-intranet.hbtn.io/rltoken/toFi_SdFHyi2MaELB8ekqw "Application server vs web server")

            Requirements:

            -   You must add:
                -   1 server
                -   1 load-balancer (HAproxy) configured as cluster with the other one
                -   Split components (web server, application server, database) with their own server
            -   You must be able to explain some specifics about this infrastructure:
                -   For every additional element, why you are adding it

            Please, remember that everything must be written in English to further your technical ability in a variety of settings.

            #### Add URLs here:

            **Repo:**

            -   GitHub repository: `alx-system_engineering-devops`
            -   Directory: `0x09-web_infrastructure_design`
            -   File: `3-scale_up`

    rubric: |

            Has something interesting to say.



completion_text: |

        You have successfully completed the test exam!
