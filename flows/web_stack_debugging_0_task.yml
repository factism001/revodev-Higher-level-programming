title: "RELATE Test Quiz"
description: |

    # RELATE Test Quiz

rules:
    # (Things behind '#' hash marks are comments.)
    # Allow students to start two attempts at the quiz before the deadline.
    # After that, only allow access to previously started quizzes.

    start:
    -
        if_after: 2015-03-06 23:59:00
        if_has_role: [student, ta, instructor]
        if_has_fewer_sessions_than: 2
        may_start_new_session: True
        may_list_existing_sessions: True

    -
        may_start_new_session: False
        may_list_existing_sessions: True

    # Allow students to submit quiz answers before the deadline.
    # After the deadline, the quiz becomes read-only. (The 'modify'
    # permission goes away.)

    access:
    -
        if_after: 2015-03-06 23:59:02
        permissions: [view, submit_answer, end_session, see_correctness]

    -
        permissions: [view, see_correctness, see_answer_after_submission]

    # Record grades under the machine-readable name 'test_quiz'.
    # If there is more than one grade, use the maximum.

    grade_identifier: web_stack_debugging_0_task
    grade_aggregation_strategy: max_grade

    grading:
    -   
        if_completed_before: end_week 1
        credit_percent: 100

    -
        if_completed_before: end_week 2
        credit_percent: 65

    -
        credit_percent: 50

pages:

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

        Tasks
        -----

        ### 0\. Give me a page!

        mandatory

        Score: 0.00% (Checks completed: 0.00%)

        Be sure to read the **Docker** concept page

        In this first debugging project, you will need to get [Apache](https://alx-intranet.hbtn.io/rltoken/HVGgLL51qmuulmw802M-Jg "Apache") to run on the container and to return a page containing `Hello Holberton` when querying the root of it.

        Example:

        ```
        vagrant@vagrant:~$ docker run -p 8080:80 -d -it holbertonschool/265-0
        47ca3994a4910bbc29d1d8925b1c70e1bdd799f5442040365a7cb9a0db218021
        vagrant@vagrant:~$ docker ps
        CONTAINER ID        IMAGE                   COMMAND             CREATED             STATUS              PORTS                  NAMES
        47ca3994a491        holbertonschool/265-0   "/bin/bash"         3 seconds ago       Up 2 seconds        0.0.0.0:8080->80/tcp   vigilant_tesla
        vagrant@vagrant:~$ curl 0:8080
        curl: (52) Empty reply from server
        vagrant@vagrant:~$

        ```

        Here we can see that after starting my Docker container, I `curl` the port `8080` mapped to the Docker container port `80`, it does not return a page but an error message. Note that you might also get the error message `curl: (52) Empty reply from server`.

        ```
        vagrant@vagrant:~$ curl 0:8080
        Hello Holberton
        vagrant@vagrant:~$

        ```

        After connecting to the container and fixing whatever needed to be fixed (here is your mission), you can see that curling port 80 return a page that contains `Hello Holberton`. Paste the command(s) you used to fix the issue in your answer file.

        **Repo:**

        -   GitHub repository: `alx-system_engineering-devops`
        -   Directory: `0x0D-web_stack_debugging_0`
        -   File: `0-give_me_a_page`
            
    rubric: |

            Has something interesting to say.



completion_text: |

        You have successfully completed the test exam!
