title: "RELATE Test Quiz"
description: |

    # RELATE Test Quiz

rules:
    # (Things behind '#' hash marks are comments.)
    # Allow students to start two attempts at the quiz before the deadline.
    # After that, only allow access to previously started quizzes.

    start:
    -
        if_after: 2015-03-06 23:59:00
        if_has_role: [student, ta, instructor]
        if_has_fewer_sessions_than: 2
        may_start_new_session: True
        may_list_existing_sessions: True

    -
        may_start_new_session: False
        may_list_existing_sessions: True

    # Allow students to submit quiz answers before the deadline.
    # After the deadline, the quiz becomes read-only. (The 'modify'
    # permission goes away.)

    access:
    -
        if_after: 2015-03-06 23:59:02
        permissions: [view, submit_answer, end_session, see_correctness]

    -
        permissions: [view, see_correctness, see_answer_after_submission]

    # Record grades under the machine-readable name 'test_quiz'.
    # If there is more than one grade, use the maximum.

    grade_identifier: git_task
    grade_aggregation_strategy: max_grade

    grading:
    -   
        if_completed_before: end_week 1
        credit_percent: 100

    -
        if_completed_before: end_week 2
        credit_percent: 65

    -
        credit_percent: 50

pages:

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

        Tasks
        -----

        ### 0\. Create and setup your Git and GitHub account

        mandatory

        Score: 100.0% (Checks completed: 100.0%)

        #### Step 0 - Create an account on GitHub \[if you do not have one already\]

        You will need a GitHub account for all your projects at ALX. If you do not already have a github.com account, you can create an account for free [here](/rltoken/1vpH3ScWYjfgZD0J59jusA "here")

        #### Step 1 - Create a Personal Access Token on Github

        To have access to your repositories and authenticate yourself, you need to create a Personal Access Token on Github.

        You can follow [this tutorial](/rltoken/coQUsDnam4suGaXSVinQxA "this tutorial") to create a token.

        Once it’s created, you should have a token that looks like this:

        ![](https://s3.amazonaws.com/alx-intranet.hbtn.io/uploads/medias/2022/2/a449483cd76a72cef1b42df831e686c64faa1cf6.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIARDDGGGOUSBVO6H7D%2F20230918%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230918T155107Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=e6278550b2d60122f7611ca3d67a74bd57ab3ee7568305ed291c9d3794683388)

        #### Step 2 - Update your profile on the Intranet

        Update your Intranet profile by adding your Github username [here](/rltoken/9dthiwx9AyxxUzV_QPIRWQ "here")

        If it’s not done **the Checker won’t be able to correct your work**

        ![](https://s3.amazonaws.com/alx-intranet.hbtn.io/uploads/medias/2022/2/6270480a0a982cd1846b877eda2ee405d2e8f575.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIARDDGGGOUSBVO6H7D%2F20230918%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230918T155107Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=1b3ddb7fb0bcc3b7a35cb8eb99b1a50a7ada768cafb10a03f6c1f5a215fe707c)

        #### Step 3 - Create your first repository

        Using the graphic interface on the [github website](/rltoken/1vpH3ScWYjfgZD0J59jusA "github website"), create your first repository.

        *   Name: `alx-zero_day`
        *   Description: `I'm now a ALX Student, this is my first repository as a full-stack engineer`
        *   Public repo
        *   No `README`, `.gitignore`, or license

        ![](https://s3.amazonaws.com/alx-intranet.hbtn.io/uploads/medias/2022/2/2340a2d0f7c74b5dd6f8fc2aa58f94d13ea2c775.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIARDDGGGOUSBVO6H7D%2F20230918%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230918T155107Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=0ab9cf4a20da1d7e4870cc9efa551088f231985477aae5489ec916a3f6221a43)

        #### Step 4 - Open the sandbox

        On the intranet, just under the task, click on the button ![](https://s3.amazonaws.com/alx-intranet.hbtn.io/uploads/medias/2022/2/9db8eece71455dfddf4b7d8585c037c535f1d18d.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIARDDGGGOUSBVO6H7D%2F20230918%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230918T155107Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=e6812722bf0721ae9ee532ded8b7cce40e3c3d775364088b60e28adf809bf78b) and `run` to start the machine.

        Once the container is started, click on ![](https://s3.amazonaws.com/alx-intranet.hbtn.io/uploads/medias/2022/2/be9d1fbfb3d97e6924a4d2af7df9290ad7ae77df.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIARDDGGGOUSBVO6H7D%2F20230918%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230918T155107Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=1a6a038575a7a044ecc9ed5f042d69796a4b599b163fa1783a32f628a421cfd9) to open a shell where you can start work from.

        #### Step 5 - Clone your repository

        On the webterm of the sandbox, do the following:

        *   Clone your repository

            ```
            root@896cf839cf9a:/# git clone https://{YOUR_PERSONAL_TOKEN}@github.com/{YOUR_USERNAME}/alx-zero_day.git                  
            Cloning into 'alx-zero_day'...
            warning: You appear to have cloned an empty repository.       
            ```

        **Replace {YOUR\_PERSONAL\_TOKEN} with your token from step 1**

        **Replace {YOUR\_USERNAME} with your username from step 0 and 1**

        **Pro-Tip:** On windows, use CTRL + A + V to paste in the web terminal

        #### Step 6 - Create the README.md and push the modifications

        *   Navigate to this new directory. [Tips](/rltoken/qSP5HcBSSIL0U23PdIGKLw "Tips")

            ```
            root@896cf839cf9a:/# cd alx-zero_day/
            root@896cf839cf9a:/alx-zero_day#
            ```

        *   Create the file `README.md` with the content `My first readme`. [Tips](/rltoken/_SSotigVtvVNThTVLJKZPQ "Tips")

            ```
            root@896cf839cf9a:/alx-zero_day# echo 'My first readme' > README.md                                                                 
            root@896cf839cf9a:/alx-zero_day# cat README.md                                                                                      
            My first readme                                                                                                                       
            ```

        *   Update your git identity

            ```
            root@896cf839cf9a:/alx-pre_course# git config --global user.email "you@example.com"
            root@896cf839cf9a:/alx-pre_course# git config --global user.name "Your Name"
            ```

        *   Add this new file to git, commit the change with this message “My first commit” and push to the remote server / origin

            ```
            root@896cf839cf9a:/alx-zero_day# git add .
            root@896cf839cf9a:/alx-zero_day# git commit -m 'My first commit'
            [master (root-commit) 98eef93] My first commit
            1 file changed, 1 insertion(+)
            create mode 100644 README.md
            root@896cf839cf9a:/alx-zero_day# git push                                                                                           
            Enumerating objects: 3, done.                                                                                                         
            Counting objects: 100% (3/3), done.                                                                                                   
            Writing objects: 100% (3/3), 212 bytes | 212.00 KiB/s, done.                                                                          
            Total 3 (delta 0), reused 0 (delta 0)                                                                                                 
            To https://github.com/{YOUR_USERNAME}/alx-zero_day.git                                                                                       
            * [new branch]      master -> master              
            ```

        Good job!

        You pushed your first file in your **first repository** of the **first task** of your **first ALX School project**.

        You can now check your repository on GitHub to see if everything is good.

        **Repo:**

        *   GitHub repository: `alx-zero_day`
        *   File: `README.md`
            
    rubric: |

            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext1
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |
            
            Tasks
            -----
            
            ### 1\. Repo-session

            mandatory

            Score: 100.0% (Checks completed: 100.0%)

            Create a new directory called `0x03-git` in your `alx-zero_day` repo.

            Make sure you include a not empty `README.md` in your directory:

            *   at the root of your repository `alx-zero_day`
            *   AND in the directory `0x03-git`

            And important part: **Make sure your commit and push your code to Github - otherwise the Checker will always fail.**

            **Repo:**

            *   GitHub repository: `alx-zero_day`

    rubric: |
            
            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext2
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

            Tasks
            -----
            
            ### 2\. Coding fury road

            mandatory

            Score: 100.0% (Checks completed: 100.0%)

            For the moment we have an empty project directory containing only a `README.md`. It’s time to code!

            *   Create these directories at the root of your project: `bash`, `c`, `js`
            *   Create these empty files:
                *   `c/c_is_fun.c`
                *   `js/main.js`
                *   `js/index.js`
            *   Create a file `bash/alx` with these two lines inside: `#!/bin/bash` and `echo "ALX"`
            *   Create a file `bash/school` with these two lines inside: `#!/bin/bash` and `echo "School"`
            *   Add all these new files to git
            *   Commit your changes (message: “Starting to code today, so cool”) and push to the remote server

            **Repo:**

            *   GitHub repository: `alx-zero_day`
            *   Directory: `0x03-git`
            *   File: `bash/alx, bash/school, c/c_is_fun.c, js/main.js, js/index.js`

    rubric: |

            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext3
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

            Tasks
            -----

            ### 3\. Collaboration is the base of a company

            mandatory

            Score: 100.0% (Checks completed: 100.0%)

            A branch is like a copy of your project. It’s used mainly for:

            *   adding a feature in development
            *   collaborating on the same project with other developers
            *   not breaking your entire repository
            *   not upsetting your co-workers

            The purpose of a branch is to isolate your work from the main code base of your project and/or from your co-workers’ work.

            For this project, create a branch `update_script` and in this branch:

            *   Create an empty file named `bash/98`
            *   Update `bash/alx` by replacing `echo "ALX"` with `echo "ALX School"`
            *   Update `bash/school` by replacing `echo "School"` with `echo "The school is open!"`
            *   Add and commit these changes (message: “My personal work”)
            *   Push this new branch [Tips](/rltoken/tN31xFfDVctixZZ350tDGw "Tips")

            Perfect! You did an amazing update in your project and it’s isolated correctly from the **main** branch.

            Ho wait, your manager needs a quick fix in your project and it needs to be deployed now:

            *   Change branch to `main`
            *   Update the file `bash/alx` by replacing `echo "ALX"` with `echo "ALX School is so cool!"`
            *   Delete the directory `js`
            *   Commit your changes (message: “Hot fix”) and push to the origin

            Ouf, hot fix is done!

            **Repo:**

            *   GitHub repository: `alx-zero_day`
            *   Directory: `0x03-git`
            *   File: `bash/alx, bash/school, bash/98`

    rubric: |

            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext4
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

            Tasks
            -----

            ### 4\. Collaboration: be up to date

            mandatory

            Score: 100.0% (Checks completed: 100.0%)

            Of course, you can also work on the same branch as your co-workers and it’s best if you keep up to date with their changes.

            For this task – **and only for this task** – please update your file `README.md` in the main branch from GitHub.com. It’s the **only time** you are allowed to update and commit from GitHub interface.

            After you have done that, in your terminal:

            *   Get all changes of the main branch locally (i.e. your `README.md` file will be updated)
            *   Create a new file `up_to_date` at the root of your directory and in it, write the git command line used
            *   Add `up_to_date` to git, commit (message: “How to be up to date in git”), and push to the origin

            **Repo:**

            *   GitHub repository: `alx-zero_day`
            *   Directory: `0x03-git`
            *   File: `README.md, up_to_date`

    rubric: |

            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext5
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

            Tasks
            -----

            ### 5\. HAAA what did you do???

            #advanced

            Score: 100.0% (Checks completed: 100.0%)

            Collaboration is cool, but not really when you update the same file at the same time…

            To illustrate that, please merge the branch `update_script` to `main`: “Cool, all my changes will be now part of the main branch, ready to be deployed!”

            **HHHHHHHAAAAAAAA**

                CONFLICT (content): Merge conflict in bash/alx
                

            As you can see, you have conflicts between two branches on the same file.

            Your goal now is to resolve conflicts by using the version of the branch `update_script`, and push the result to the origin.

            At the end, you should have all your work from the branch `update_script` (new file and two updated files) and all latest `main` commits (new files, delete folder, etc.), _without_ conflicts.

            **Repo:**

            *   GitHub repository: `alx-zero_day`
            *   Directory: `0x03-git`
        
    rubric: |

            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext6
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |
            Tasks
            -----

            ### 6\. Never push too much

            #advanced

            Score: 100.0% (Checks completed: 100.0%)

            Create a `.gitignore` file and define a rule to never push `~` files (generated by Emacs). [Tips](/rltoken/sEKIVnR2lEL0sN4jc26hhA "Tips")

            **Repo:**

            *   GitHub repository: `alx-zero_day`
            *   Directory: `0x03-git`
            *   File: `.gitignore`
    
    rubric: |

            Has something interesting to say.




completion_text: |

        You have successfully completed the test exam!
