title: "RELATE Test Quiz"
description: |

    # RELATE Test Quiz

rules:
    # (Things behind '#' hash marks are comments.)
    # Allow students to start two attempts at the quiz before the deadline.
    # After that, only allow access to previously started quizzes.

    start:
    -
        if_after: 2015-03-06 23:59:00
        if_has_role: [student, ta, instructor]
        if_has_fewer_sessions_than: 2
        may_start_new_session: True
        may_list_existing_sessions: True

    -
        may_start_new_session: False
        may_list_existing_sessions: True

    # Allow students to submit quiz answers before the deadline.
    # After the deadline, the quiz becomes read-only. (The 'modify'
    # permission goes away.)

    access:
    -
        if_after: 2015-03-06 23:59:02
        permissions: [view, submit_answer, end_session, see_correctness]

    -
        permissions: [view, see_correctness, see_answer_after_submission]

    # Record grades under the machine-readable name 'test_quiz'.
    # If there is more than one grade, use the maximum.

    grade_identifier: networking_basics_2_task
    grade_aggregation_strategy: max_grade

    grading:
    -   
        if_completed_before: end_week 1
        credit_percent: 100

    -
        if_completed_before: end_week 2
        credit_percent: 65

    -
        credit_percent: 50

pages:

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

        Tasks
        -----

        ### 0\. Change your home IP

        mandatory

        Score: 0.00% (Checks completed: 0.00%)

        Write a Bash script that configures an Ubuntu server with the below requirements.

        Requirements:

        -   `localhost` resolves to `127.0.0.2`
        -   `facebook.com` resolves to `8.8.8.8`.
        -   The checker is running on Docker, so make sure to read [this](https://alx-intranet.hbtn.io/rltoken/h50f-AAOBFjIrVc8zX34ug "this")

        Example:

        ```
        sylvain@ubuntu$ ping localhost
        PING localhost (127.0.0.1) 56(84) bytes of data.
        64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.012 ms
        ^C
        --- localhost ping statistics ---
        1 packets transmitted, 1 received, 0% packet loss, time 0ms
        rtt min/avg/max/mdev = 0.012/0.012/0.012/0.000 ms
        sylvain@ubuntu$
        sylvain@ubuntu$ ping facebook.com
        PING facebook.com (157.240.11.35) 56(84) bytes of data.
        64 bytes from edge-star-mini-shv-02-lax3.facebook.com (157.240.11.35): icmp_seq=1 ttl=63 time=15.4 ms
        ^C
        --- facebook.com ping statistics ---
        1 packets transmitted, 1 received, 0% packet loss, time 0ms
        rtt min/avg/max/mdev = 15.432/15.432/15.432/0.000 ms
        sylvain@ubuntu$
        sylvain@ubuntu$ sudo ./0-change_your_home_IP
        sylvain@ubuntu$
        sylvain@ubuntu$ ping localhost
        PING localhost (127.0.0.2) 56(84) bytes of data.
        64 bytes from localhost (127.0.0.2): icmp_seq=1 ttl=64 time=0.012 ms
        64 bytes from localhost (127.0.0.2): icmp_seq=2 ttl=64 time=0.036 ms
        ^C
        --- localhost ping statistics ---
        2 packets transmitted, 2 received, 0% packet loss, time 1000ms
        rtt min/avg/max/mdev = 0.012/0.024/0.036/0.012 ms
        sylvain@ubuntu$
        sylvain@ubuntu$ ping facebook.com
        PING facebook.com (8.8.8.8) 56(84) bytes of data.
        64 bytes from facebook.com (8.8.8.8): icmp_seq=1 ttl=63 time=8.06 ms
        ^C
        --- facebook.com ping statistics ---
        1 packets transmitted, 1 received, 0% packet loss, time 0ms
        rtt min/avg/max/mdev = 8.065/8.065/8.065/0.000 ms

        ```

        In this example we can see that:

        -   before running the script, `localhost` resolves to `127.0.0.1` and `facebook.com` resolves to `157.240.11.35`
        -   after running the script, `localhost` resolves to `127.0.0.2` and `facebook.com` resolves to `8.8.8.8`

        If you're running this script on a machine that you'll continue to use, be sure to revert `localhost` to `127.0.0.1`. Otherwise, a lot of things will stop working!

        **Repo:**

        -   GitHub repository: `alx-system_engineering-devops`
        -   Directory: `0x08-networking_basics_2`
        -   File: `0-change_your_home_IP`

         Done? Help Check your code Ask for a new correction Get a sandbox QA Review
            
    rubric: |

            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext1
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |
            
            Tasks
            -----
            
            ### 1\. Show attached IPs

            mandatory

            Score: 0.00% (Checks completed: 0.00%)

            Write a Bash script that displays all active IPv4 IPs on the machine it's executed on.

            Example:

            ```
            sylvain@ubuntu$ ./1-show_attached_IPs | cat -e
            10.0.2.15$
            127.0.0.1$
            sylvain@ubuntu$

            ```

            Obviously, the IPs displayed may be different depending on which machine you are running the script on.

            Note that we can see our `localhost` IP :)

            **Repo:**

            -   GitHub repository: `alx-system_engineering-devops`
            -   Directory: `0x08-networking_basics_2`
            -   File: `1-show_attached_IPs`

             Done? Help Check your code Ask for a new correction Get a sandbox QA Review

    rubric: |
            
            Has something interesting to say.

-
    type: PythonCodeQuestionWithHumanTextFeedback
    id: hgtext2
    access_rules:
        add_permissions:
            - change_answer
    value: 5
    human_feedback_percentage: 100
    is_optional_page: false
    timeout: 10
    prompt: |

            Tasks
            -----
            
            ### 2\. Port listening on localhost

            #advanced

            Score: 0.00% (Checks completed: 0.00%)

            Write a Bash script that listens on port `98` on `localhost`.

            **Terminal 0**

            Starting my script.

            ```
            sylvain@ubuntu$ sudo ./100-port_listening_on_localhost

            ```

            **Terminal 1**

            Connecting to `localhost` on port `98` using `telnet` and typing some text.

            ```
            sylvain@ubuntu$ telnet localhost 98
            Trying 127.0.0.2...
            Connected to localhost.
            Escape character is '^]'.
            Hello world
            test

            ```

            **Terminal 0**

            Receiving the text on the other side.

            ```
            sylvain@ubuntu$ sudo ./100-port_listening_on_localhost
            Hello world
            test

            ```

            For the sake of the exercise, this connection is made entirely within `localhost`. This isn't really exciting as is, but we can use this script across networks as well. Try running it between your local PC and your remote server for fun!

            As you can see, this can come in very handy in a multitude of situations. Maybe you're debugging socket connection issues, or you're trying to connect to a software and you are unsure if the issue is the software or the network, or you're working on firewall rules... Another tool to add to your debugging toolbox!

            **Repo:**

            -   GitHub repository: `alx-system_engineering-devops`
            -   Directory: `0x08-networking_basics_2`
            -   File: `100-port_listening_on_localhost`

    rubric: |

            Has something interesting to say.



completion_text: |

        You have successfully completed the test exam!
