chunks:

-
    title: "Python Hello World"
    id: welcome
    rules:
    -   if_before: end_week 3
        weight: 100

    -   weight: 0

    content: |

            # Welcome to the course!

            Please take our introductory [quiz](flow:quiz-test).
            Or via here <a href="flow:quiz-test" role="button" class="btn btn-primary">Bootstrap button</a>.
            # Hi there!
            0x08. Python - More Classes and Objects
            =======================================

            -   By Guillaume
            -   Weight: 1


            #### In a nutshell...

            -   **Auto QA review:** 0.0/106 mandatory & 0.0/15 optional
            -   **Altogether:**  **0.0%**
                -   Mandatory: 0.0%
                -   Optional: 0.0%
                -   Calculation:  0.0% + (0.0% * 0.0%)  == **0.0%**

            Resources
            ---------

            **Read or watch**:

            -   [Object Oriented Programming](https://alx-intranet.hbtn.io/rltoken/M-MFweENpRdEfRto_Gzlvg "Object Oriented Programming") (*Read everything until the paragraph "Inheritance" (excluded)*)
            -   [Object-Oriented Programming](https://alx-intranet.hbtn.io/rltoken/_Awd8Gn4SBdq2FRd_bY8KA "Object-Oriented Programming") (*Please be careful: in most of the following paragraphs, the author shows the way you should not use or write a class, in order to help you better understand some concepts and how everything works in Python 3. Make sure you read only the following paragraphs: "General Introduction," "First-class Everything," "A Minimal Class in Python," "Attributes," "Methods," "The `__init__` Method," "Data Abstraction, Data Encapsulation, and Information Hiding," "`__str__`- and `__repr__`-Methods," "Public- Protected- and Private Attributes," & "Destructor"*)
            -   [Class and Instance Attributes](https://alx-intranet.hbtn.io/rltoken/SGQIevRxW6lTgr4jGDzXbw "Class and Instance Attributes")
            -   [classmethods and staticmethods](https://alx-intranet.hbtn.io/rltoken/Ij1EnTg02gtIknOkNv4xGA "classmethods and staticmethods")
            -   [Properties vs. Getters and Setters](https://alx-intranet.hbtn.io/rltoken/xjpk-jUNe0uGEzcNXbwIHQ "Properties vs. Getters and Setters") (*Mainly the last part "Public instead of Private Attributes"*)
            -   [str vs repr](https://alx-intranet.hbtn.io/rltoken/iu1ILT-t6FMuZvk7vRvfuQ "str vs repr")

            Learning Objectives
            -------------------

            At the end of this project, you are expected to be able to [explain to anyone](https://alx-intranet.hbtn.io/rltoken/hOViVT2nJU8jeBxvw52bjw "explain to anyone"), **without the help of Google**:

            ### General

            -   Why Python programming is awesome
            -   What is OOP
            -   "first-class everything"
            -   What is a class
            -   What is an object and an instance
            -   What is the difference between a class and an object or instance
            -   What is an attribute
            -   What are and how to use public, protected and private attributes
            -   What is `self`
            -   What is a method
            -   What is the special `__init__` method and how to use it
            -   What is Data Abstraction, Data Encapsulation, and Information Hiding
            -   What is a property
            -   What is the difference between an attribute and a property in Python
            -   What is the Pythonic way to write getters and setters in Python
            -   What are the special `__str__` and `__repr__` methods and how to use them
            -   What is the difference between `__str__` and `__repr__`
            -   What is a class attribute
            -   What is the difference between a object attribute and a class attribute
            -   What is a class method
            -   What is a static method
            -   How to dynamically create arbitrary new attributes for existing instances of a class
            -   How to bind attributes to object and classes
            -   What is and what does contain `__dict__` of a class and of an instance of a class
            -   How does Python find the attributes of an object or class
            -   How to use the `getattr` function

            Requirements
            ------------

            ### General

            -   Allowed editors: `vi`, `vim`, `emacs`
            -   All your files will be interpreted/compiled on Ubuntu 20.04 LTS using python3 (version 3.8.5)
            -   All your files should end with a new line
            -   The first line of all your files should be exactly `#!/usr/bin/python3`
            -   A `README.md` file, at the root of the folder of the project, is mandatory
            -   Your code should use the pycodestyle (version 2.7.*)
            -   All your files must be executable
            -   The length of your files will be tested using `wc`

-
    title: "Python hello tas pointer"

    id: tas pointer
    rules:
    -
        if_after: 2022-06-01
        weight: 200

    -
        shown: True
        weight: 0

    content: |

        # Welcome to the computer-based testing facility!

        <a href="flow:python-more_classes_task" class="btn btn-secondary">Start tas &raquo;</a>